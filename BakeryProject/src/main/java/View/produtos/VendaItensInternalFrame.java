/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JInternalFrame.java to edit this template
 */
package View.produtos;

import DAO.FuncionarioDAO;
import DAO.ProdutoDAO;
import java.util.ArrayList;
import java.util.List;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;
import model.ItemPedido;
import model.Produto;
/**
 *
 * @author joaoh
 */
public class VendaItensInternalFrame extends javax.swing.JInternalFrame {

    /**
     * Creates new form VendaItensInternalFrame
     */
    
    private List<ItemPedido> itensSelecionados = new ArrayList<>();
    
    public VendaItensInternalFrame() {
        initComponents();
        ProdutoDAO produtoDAO = new ProdutoDAO();
        List<Produto> produtos;
        try {
            produtos = produtoDAO.buscarTodos();
            popularProdutos(produtos);
        } catch (Exception ex) {
            Logger.getLogger(VendaItensInternalFrame.class.getName()).log(Level.SEVERE, null, ex);
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        queryProdInput = new javax.swing.JTextField();
        jButton1 = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        produtosTable = new javax.swing.JTable();
        addItemAoSelecionado = new javax.swing.JButton();
        RemoverItemDoSelecionado = new javax.swing.JButton();
        limparCarrinho = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jScrollPane2 = new javax.swing.JScrollPane();
        selecionadosTable = new javax.swing.JTable();
        jLabel5 = new javax.swing.JLabel();
        concluirVenda = new javax.swing.JButton();
        jLabel6 = new javax.swing.JLabel();
        valorEntregue = new javax.swing.JTextField();
        jLabel7 = new javax.swing.JLabel();
        quantidadeProdInput = new javax.swing.JTextField();
        jLabel8 = new javax.swing.JLabel();

        setClosable(true);
        setIconifiable(true);

        queryProdInput.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                queryProdInputActionPerformed(evt);
            }
        });

        jButton1.setText("Buscar");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        produtosTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null}
            },
            new String [] {
                "Id", "Nome", "Quantidade", "Valor", "Cat√©goria"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Long.class, java.lang.String.class, java.lang.Integer.class, java.lang.Double.class, java.lang.String.class
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }
        });
        jScrollPane1.setViewportView(produtosTable);

        addItemAoSelecionado.setText("Adicionar");
        addItemAoSelecionado.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addItemAoSelecionadoActionPerformed(evt);
            }
        });

        RemoverItemDoSelecionado.setText("Remover");

        limparCarrinho.setText("Limpar Carrinho");
        limparCarrinho.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                limparCarrinhoActionPerformed(evt);
            }
        });

        jLabel1.setText("VALOR ENTREGUE:");

        jLabel2.setText("TROCO:");

        jLabel3.setText("VALOR TOTAL:");

        jLabel4.setText("TODOS O ITENS SELECIONADO");

        selecionadosTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Id", "Nome", "Quantidade", "Valor"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Integer.class, java.lang.String.class, java.lang.Integer.class, java.lang.Double.class
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }
        });
        jScrollPane2.setViewportView(selecionadosTable);

        jLabel5.setText("RESULTADO");

        concluirVenda.setText("Fechar Venda");

        jLabel6.setText("Troco");

        jLabel7.setText("Valor Total");

        quantidadeProdInput.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                quantidadeProdInputActionPerformed(evt);
            }
        });

        jLabel8.setText("Quantidade");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(14, 14, 14)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(queryProdInput, javax.swing.GroupLayout.PREFERRED_SIZE, 795, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 110, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(14, 14, 14))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(addItemAoSelecionado, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(RemoverItemDoSelecionado, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(limparCarrinho, javax.swing.GroupLayout.DEFAULT_SIZE, 175, Short.MAX_VALUE)
                                    .addComponent(quantidadeProdInput)
                                    .addGroup(layout.createSequentialGroup()
                                        .addGap(53, 53, 53)
                                        .addComponent(jLabel8))))
                            .addGroup(layout.createSequentialGroup()
                                .addGap(181, 181, 181)
                                .addComponent(jLabel5))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jLabel1)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(valorEntregue, javax.swing.GroupLayout.PREFERRED_SIZE, 81, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jLabel2)
                                .addGap(18, 18, 18)
                                .addComponent(jLabel6))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jLabel3)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jLabel7)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(concluirVenda, javax.swing.GroupLayout.PREFERRED_SIZE, 175, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(18, 18, 18)
                                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 257, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addContainerGap(12, Short.MAX_VALUE))
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(jLabel4)
                                .addGap(55, 55, 55))))))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(queryProdInput, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jButton1, javax.swing.GroupLayout.DEFAULT_SIZE, 30, Short.MAX_VALUE))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel4)
                    .addComponent(jLabel5))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jLabel8)
                                .addGap(5, 5, 5)
                                .addComponent(quantidadeProdInput, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(28, 28, 28)
                                .addComponent(addItemAoSelecionado, javax.swing.GroupLayout.PREFERRED_SIZE, 33, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(28, 28, 28)
                                .addComponent(RemoverItemDoSelecionado, javax.swing.GroupLayout.PREFERRED_SIZE, 33, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(limparCarrinho, javax.swing.GroupLayout.PREFERRED_SIZE, 33, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 234, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(15, 15, 15)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(jLabel1)
                                    .addComponent(valorEntregue, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGap(18, 18, 18)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(jLabel2)
                                    .addComponent(jLabel6))
                                .addGap(20, 20, 20)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(jLabel3)
                                    .addComponent(jLabel7)))
                            .addComponent(concluirVenda, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 33, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE))
                .addGap(20, 20, 20))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void addItemAoSelecionadoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addItemAoSelecionadoActionPerformed
        adicionarItemPedido();
    }//GEN-LAST:event_addItemAoSelecionadoActionPerformed

    private void quantidadeProdInputActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_quantidadeProdInputActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_quantidadeProdInputActionPerformed

    private void queryProdInputActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_queryProdInputActionPerformed

        
    }//GEN-LAST:event_queryProdInputActionPerformed

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        ProdutoDAO produtoDAO = new ProdutoDAO();
        List<Produto> produtos;
        try {
            produtos = produtoDAO.buscarPorNome(queryProdInput.getText());
            popularProdutos(produtos);
            popularPedidos();
        } catch (Exception ex) {
            Logger.getLogger(VendaItensInternalFrame.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_jButton1ActionPerformed

    private void limparCarrinhoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_limparCarrinhoActionPerformed
       limparCarrinho();
    }//GEN-LAST:event_limparCarrinhoActionPerformed
    
    public void popularProdutos(List<Produto> produtos) {
        try {
            DefaultTableModel modelo = (DefaultTableModel) produtosTable.getModel();

            modelo.setRowCount(0);

            for (Produto produto: produtos) {
                modelo.addRow(new Object[]{
                    produto.getId(),
                    produto.getNome(),
                    produto.getQuantidade(),
                    produto.getValor(),
                    produto.getCategoria()
                });
            }

        } catch (Exception e) {
            JOptionPane.showMessageDialog(this, 
                "Erro ao carregar funcion√°rios: " + e.getMessage(), 
                "Erro", 
                JOptionPane.ERROR_MESSAGE);
        }
    }
    
    public void popularPedidos() {
        try {
            DefaultTableModel modelo = (DefaultTableModel) selecionadosTable.getModel();
            modelo.setRowCount(0); 

            for (ItemPedido item : itensSelecionados) {
                modelo.addRow(new Object[]{
                    item.getProdutoId(),
                    item.getProdutoNome(),
                    item.getQuantidade(),
                    item.getValorTotal(),
                });
            }

        } catch (Exception e) {
            JOptionPane.showMessageDialog(this, 
                "Erro ao carregar itens do pedido: " + e.getMessage(), 
                "Erro", 
                JOptionPane.ERROR_MESSAGE);
        }
    }
    
    public void adicionarItemPedido() {
        try {
            int linhaSelecionada = produtosTable.getSelectedRow();
            if (linhaSelecionada == -1) {
                JOptionPane.showMessageDialog(this, 
                    "Selecione um produto na tabela", 
                    "Aviso", 
                    JOptionPane.WARNING_MESSAGE);
                return;
            }

            int quantidade;
            try {
                quantidade = Integer.parseInt(quantidadeProdInput.getText().trim());
                if (quantidade <= 0) {
                    throw new NumberFormatException();
                }
            } catch (NumberFormatException e) {
                JOptionPane.showMessageDialog(this, 
                    "Digite uma quantidade v√°lida (n√∫mero inteiro positivo)", 
                    "Erro", 
                    JOptionPane.ERROR_MESSAGE);
                return;
            }

            DefaultTableModel modelo = (DefaultTableModel) produtosTable.getModel();
            Long id = (Long) modelo.getValueAt(linhaSelecionada, 0);
            String nome = (String) modelo.getValueAt(linhaSelecionada, 1);
            Double valorUnitario = (Double) modelo.getValueAt(linhaSelecionada, 3);
            String categoria = (String) modelo.getValueAt(linhaSelecionada, 4);

            Double valorTotal = valorUnitario * quantidade;

            ItemPedido item = new ItemPedido(id, nome, quantidade, valorUnitario, valorTotal, categoria);

            itensSelecionados.add(item);

            JOptionPane.showMessageDialog(this, 
                "Item adicionado:\n" +
                quantidade + " x " + nome + " - R$ " + String.format("%.2f", valorTotal),
                "Item Adicionado", 
                JOptionPane.INFORMATION_MESSAGE);

            quantidadeProdInput.setText("");
            popularPedidos();    
        } catch (Exception e) {
            JOptionPane.showMessageDialog(this, 
                "Erro ao adicionar item: " + e.getMessage(), 
                "Erro", 
                JOptionPane.ERROR_MESSAGE);
        }
    }
    
    private void limparCarrinho() {                                               
        // Verifica se h√° itens no carrinho
        if (itensSelecionados.isEmpty()) {
            JOptionPane.showMessageDialog(this, 
                "O carrinho j√° est√° vazio", 
                "Informa√ß√£o", 
                JOptionPane.INFORMATION_MESSAGE);
            return;
        }

        // Calcula o total de itens e valor do carrinho
        int totalItens = itensSelecionados.size();
        double valorTotal = itensSelecionados.stream()
                               .mapToDouble(ItemPedido::getValorTotal)
                               .sum();

        // Cria mensagem de confirma√ß√£o detalhada
        String mensagem = String.format(
            "Tem certeza que deseja limpar o carrinho?\n\n" +
            "Itens no carrinho: %d\n" +
            "Valor total: R$ %.2f", 
            totalItens, valorTotal);

        // Exibe di√°logo de confirma√ß√£o
        int confirmacao = JOptionPane.showConfirmDialog(
            this, 
            mensagem, 
            "Confirmar limpeza do carrinho", 
            JOptionPane.YES_NO_OPTION,
            JOptionPane.WARNING_MESSAGE);

        // Se confirmado, limpa o carrinho
        if (confirmacao == JOptionPane.YES_OPTION) {
            itensSelecionados.clear();
            popularPedidos();
            JOptionPane.showMessageDialog(this, 
                "Carrinho limpo com sucesso", 
                "Sucesso", 
                JOptionPane.INFORMATION_MESSAGE);
        }
    }
    
    
    

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton RemoverItemDoSelecionado;
    private javax.swing.JButton addItemAoSelecionado;
    private javax.swing.JButton concluirVenda;
    private javax.swing.JButton jButton1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JButton limparCarrinho;
    private javax.swing.JTable produtosTable;
    private javax.swing.JTextField quantidadeProdInput;
    private javax.swing.JTextField queryProdInput;
    private javax.swing.JTable selecionadosTable;
    private javax.swing.JTextField valorEntregue;
    // End of variables declaration//GEN-END:variables
}
